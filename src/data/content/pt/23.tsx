import CodeBlock from "@/components/ui/code-block";

const Lecture23Pt = () => (
	<div className='space-y-8'>
		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				1. O que √© uma Fun√ß√£o? Empacotando o Nosso C√≥digo
			</h3>
			<p className='mb-4'>
				At√© agora, escrevemos c√≥digo que √© executado de cima para baixo, uma
				linha ap√≥s a outra. Mas, e se precisarmos de realizar a mesma tarefa em
				v√°rios locais? Copiar e colar? N√£o! Isso vai contra um dos princ√≠pios
				mais importantes da programa√ß√£o:{" "}
				<strong>DRY (Don't Repeat Yourself - N√£o se Repita)</strong>.
			</p>
			<p className='mb-4'>
				√â aqui que entram as <strong>fun√ß√µes</strong>. Uma fun√ß√£o √© um bloco de
				c√≥digo reutiliz√°vel, projetado para realizar uma tarefa espec√≠fica.
				Pense nela como uma receita de culin√°ria: tem um nome (ex. "fazer uma
				omelete"), aceita ingredientes (par√¢metros) e segue uma s√©rie de passos
				para produzir um resultado (um valor de retorno).
			</p>
			<p>
				As fun√ß√µes permitem-nos organizar, reutilizar e simplificar o nosso
				c√≥digo, tornando-o mais leg√≠vel e f√°cil de manter.
			</p>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				2. Declara√ß√£o de Fun√ß√£o (Function Declaration)
			</h3>
			<p className='mb-4'>
				Esta √© a forma mais cl√°ssica e direta de criar uma fun√ß√£o em JavaScript.
				A sua estrutura √© muito clara:
			</p>
			<ul className='list-disc list-inside space-y-2 pl-4 mb-4'>
				<li>
					Come√ßa com a palavra-chave <code>function</code>.
				</li>
				<li>
					Segue-se o nome que queremos dar √† fun√ß√£o (ex. <code>saudar</code>).
				</li>
				<li>
					Depois, um par de par√™nteses <code>()</code> que podem conter uma
					lista de <strong>par√¢metros</strong> (os "ingredientes" que a fun√ß√£o
					precisa para trabalhar).
				</li>
				<li>
					Finalmente, um bloco de c√≥digo entre chavetas <code>{"{ ... }"}</code>
					, que √© o corpo da fun√ß√£o (os "passos da receita").
				</li>
			</ul>

			<h4 className='text-xl font-semibold mt-6 mb-2'>A Declara√ß√£o `return`</h4>
			<p className='mb-4'>
				A palavra-chave <code>return</code> √© crucial. Especifica o valor que a
				fun√ß√£o "devolve" ou "produz" depois de ser executada. Quando um{" "}
				<code>return</code> √© encontrado, a fun√ß√£o termina imediatamente e envia
				esse valor de volta para o local onde foi chamada. Se uma fun√ß√£o n√£o
				tiver uma declara√ß√£o <code>return</code>, devolve <code>undefined</code>{" "}
				por defeito.
			</p>
			<CodeBlock
				language='javascript'
				codeString={`// 1. Declara√ß√£o da fun√ß√£o
function somar(numeroA, numeroB) {
  const resultado = numeroA + numeroB;
  return resultado; // Devolve o valor calculado
}

// 2. Chamada (ou invoca√ß√£o) da fun√ß√£o
const resultadoSoma = somar(5, 10); // Passamos 5 e 10 como argumentos

console.log(resultadoSoma); // Mostra 15 na consola`}
			/>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				3. Express√£o de Fun√ß√£o (Function Expression)
			</h3>
			<p className='mb-4'>
				Em JavaScript, as fun√ß√µes s√£o "cidad√£os de primeira classe". Isto
				significa que podem ser tratadas como qualquer outro valor: podem ser
				atribu√≠das a vari√°veis, passadas como argumentos para outras fun√ß√µes,
				etc.
			</p>
			<p className='mb-4'>
				Uma express√£o de fun√ß√£o ocorre quando criamos uma fun√ß√£o e a atribu√≠mos
				a uma vari√°vel. Frequentemente, estas fun√ß√µes s√£o{" "}
				<strong>an√≥nimas</strong> (n√£o t√™m um nome depois da palavra{" "}
				<code>function</code>), uma vez que a vari√°vel √© que agora cont√©m a
				refer√™ncia para a fun√ß√£o.
			</p>
			<CodeBlock
				language='javascript'
				codeString={`// "subtrair" √© uma vari√°vel que cont√©m uma fun√ß√£o
const subtrair = function(numeroA, numeroB) {
  return numeroA - numeroB;
};

// Chamamo-la usando o nome da vari√°vel
const resultadoSubtracao = subtrair(20, 7);

console.log(resultadoSubtracao); // Mostra 13`}
			/>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				4. Declara√ß√£o vs. Express√£o: A Diferen√ßa Chave do Hoisting
			</h3>
			<p className='mb-4'>
				Embora pare√ßam semelhantes, h√° uma diferen√ßa fundamental: o{" "}
				<strong>hoisting</strong> (i√ßamento).
			</p>
			<ul className='list-disc list-inside space-y-2 pl-4 mb-4'>
				<li>
					<strong>Declara√ß√µes de Fun√ß√£o:</strong> S√£o "i√ßadas" (hoisted). O
					interpretador de JavaScript move-as para o topo do seu escopo antes de
					o c√≥digo ser executado. Isto significa que pode chamar uma fun√ß√£o
					declarada <strong>antes</strong> da sua defini√ß√£o no c√≥digo.
				</li>
				<li>
					<strong>Express√µes de Fun√ß√£o:</strong> N√£o s√£o "i√ßadas". A vari√°vel
					que as cont√©m √© "i√ßada" (se declarada com <code>var</code>, mas n√£o √©
					inicializada), mas a atribui√ß√£o da fun√ß√£o n√£o. Portanto, deve definir
					uma express√£o de fun√ß√£o <strong>antes</strong> de a poder chamar.
				</li>
			</ul>
			<CodeBlock
				language='javascript'
				codeString={`// Isto funciona gra√ßas ao hoisting das declara√ß√µes
console.log(saudacaoDeclaracao("Jo√£o")); // Mostra "Ol√°, Jo√£o"

function saudacaoDeclaracao(nome) {
  return \`Ol√°, \${nome}\`;
}


// Isto ir√° produzir um erro: ReferenceError: Cannot access 'saudacaoExpressao' before initialization
// console.log(saudacaoExpressao("Ana"));

const saudacaoExpressao = function(nome) {
  return \`Ol√°, \${nome}\`;
};

// Para funcionar, a chamada deve estar depois
console.log(saudacaoExpressao("Ana")); // Mostra "Ol√°, Ana"`}
			/>
			<div className='p-4 bg-blue-50 dark:bg-gray-800 border-l-4 border-blue-500 rounded-r-lg my-4'>
				<p className='font-semibold text-blue-800 dark:text-blue-300'>
					Qual usar?
				</p>
				<p className='text-blue-700 dark:text-gray-300'>
					Ambas s√£o v√°lidas. Muitos programadores preferem as express√µes de
					fun√ß√£o com <code>const</code> porque evitam o hoisting, o que pode
					tornar o c√≥digo mais previs√≠vel e menos propenso a erros ao for√ßar uma
					estrutura de cima para baixo.
				</p>
			</div>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				üìù Tarefa: A Calculadora Universal
			</h3>
			<p className='mb-4'>
				√â hora de construir o seu pr√≥prio conjunto de ferramentas matem√°ticas!
				Nesta tarefa, ir√° praticar ambas as formas de criar fun√ß√µes.
			</p>
			<ol className='list-decimal list-inside space-y-2 pl-4 mb-4'>
				<li>
					No seu ficheiro <code>main.js</code>, crie quatro fun√ß√µes usando a
					sintaxe de <strong>declara√ß√£o de fun√ß√£o</strong>:
					<ul className='list-disc list-inside space-y-1 pl-6 my-2'>
						<li>
							<code>somar(a, b)</code> que devolva a soma de dois n√∫meros.
						</li>
						<li>
							<code>subtrair(a, b)</code> que devolva a subtra√ß√£o.
						</li>
						<li>
							<code>multiplicar(a, b)</code> que devolva o produto.
						</li>
						<li>
							<code>dividir(a, b)</code> que devolva a divis√£o.
						</li>
					</ul>
				</li>
				<li>
					Agora, crie as mesmas quatro fun√ß√µes, mas desta vez usando a sintaxe
					de <strong>express√£o de fun√ß√£o</strong>. Atribua cada uma a uma
					constante com um nome diferente (ex. <code>somaExpressao</code>,{" "}
					<code>subtracaoExpressao</code>, etc.).
				</li>
				<li>
					Teste cada uma das suas oito fun√ß√µes. Chame-as com diferentes n√∫meros
					e mostre os resultados na consola de uma forma clara e descritiva. Por
					exemplo:
					<CodeBlock
						language='javascript'
						codeString={`console.log("Declara√ß√£o: 10 + 5 =", somar(10, 5));
console.log("Express√£o: 20 * 4 =", multiplicarExpressao(20, 4));`}
					/>
				</li>
				<li>
					<strong>Desafio (Opcional):</strong> Na sua fun√ß√£o{" "}
					<code>dividir</code>, adicione uma condi√ß√£o (<code>if</code>) para
					verificar se o segundo par√¢metro (o divisor) √© <code>0</code>. Se for,
					em vez de realizar a divis√£o, devolva uma string que diga "Erro: N√£o √©
					poss√≠vel dividir por zero".
				</li>
			</ol>
		</section>
	</div>
);

export default Lecture23Pt;
