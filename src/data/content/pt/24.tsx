import CodeBlock from "@/components/ui/code-block";

const Lecture24Pt = () => (
	<div className='space-y-8'>
		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				1. Introdu√ß√£o √† Pr√≥xima Gera√ß√£o de Fun√ß√µes
			</h3>
			<p className='mb-4'>
				Na li√ß√£o anterior, estabelecemos as duas formas principais de criar
				fun√ß√µes: declara√ß√µes e express√µes. Hoje, vamos explorar uma sintaxe mais
				moderna e concisa introduzida no ES6: as{" "}
				<strong>Arrow Functions (Fun√ß√µes de Seta)</strong>.
			</p>
			<p className='mb-4'>
				Al√©m disso, vamos mergulhar num dos conceitos mais importantes e
				poderosos do JavaScript: os <strong>Callbacks</strong>. Entender os
				callbacks √© fundamental, pois s√£o a base da programa√ß√£o ass√≠ncrona, da
				manipula√ß√£o de eventos e muito mais.
			</p>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				2. Arrow Functions (`=&gt;`): Sintaxe Concisa e Moderna
			</h3>
			<p className='mb-4'>
				As fun√ß√µes de seta oferecem-nos uma forma mais curta de escrever
				express√µes de fun√ß√£o. Comparemos a sintaxe:
			</p>
			<CodeBlock
				language='javascript'
				codeString={`// Express√£o de fun√ß√£o cl√°ssica
const somar_classica = function(a, b) {
  return a + b;
};

// Fun√ß√£o de seta
const somar_seta = (a, b) => {
  return a + b;
};`}
			/>

			<h4 className='text-xl font-semibold mt-6 mb-2'>
				Regras de Sintaxe e Atalhos
			</h4>
			<ul className='list-disc list-inside space-y-2 pl-4 mb-4'>
				<li>
					<strong>Retorno impl√≠cito:</strong> Se a fun√ß√£o tiver apenas uma linha
					e essa linha for um <code>return</code>, podemos omitir as chavetas{" "}
					<code>{"{ }"}</code> e a palavra-chave <code>return</code>.
				</li>
				<li>
					<strong>Um √∫nico par√¢metro:</strong> Se a fun√ß√£o tiver apenas um
					par√¢metro, podemos omitir os par√™nteses <code>()</code> √† volta dele.
				</li>
				<li>
					<strong>Sem par√¢metros:</strong> Se n√£o houver par√¢metros, devemos
					usar um par de par√™nteses vazios <code>()</code>.
				</li>
			</ul>

			<CodeBlock
				language='javascript'
				codeString={`// Retorno impl√≠cito
const somar = (a, b) => a + b;

// Um √∫nico par√¢metro
const quadrado = numero => numero * numero;

// Sem par√¢metros
const saudar = () => "Ol√° Mundo!";

console.log(somar(5, 3));       // Mostra 8
console.log(quadrado(4));      // Mostra 16
console.log(saudar());         // Mostra "Ol√° Mundo!"`}
			/>
			<p className='mt-4'>
				Al√©m de serem mais curtas, as fun√ß√µes de seta t√™m uma diferen√ßa
				importante na forma como lidam com o contexto de <code>this</code>, algo
				que exploraremos numa li√ß√£o futura, mas que as torna extremamente √∫teis
				em muitas situa√ß√µes.
			</p>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				3. Callbacks: Fun√ß√µes como Argumentos
			</h3>
			<p className='mb-4'>
				Lembremos que em JavaScript as fun√ß√µes s√£o "cidad√£os de primeira
				classe". Isto significa que uma fun√ß√£o pode ser passada como argumento
				para outra fun√ß√£o.
			</p>
			<p className='mb-4'>
				Um <strong>callback</strong> √© precisamente isso: uma fun√ß√£o que √©
				passada a outra fun√ß√£o como argumento, para ser "chamada de volta"
				(executada) mais tarde.
			</p>
			<p className='mb-4'>
				<strong>Analogia:</strong> Imagine que pede uma pizza ao domic√≠lio. D√°
				ao entregador o seu endere√ßo (o "callback") e diz-lhe: "quando a pizza
				estiver pronta, leve-a a este endere√ßo". N√£o fica √† espera na porta.
				Continua com a sua vida, e o entregador "executa a entrega" (chama o seu
				callback) quando a tarefa principal (fazer a pizza) termina. Esta √© a
				ess√™ncia da programa√ß√£o ass√≠ncrona, onde os callbacks s√£o cruciais.
			</p>
			<CodeBlock
				language='javascript'
				codeString={`// 'saudar' √© uma fun√ß√£o normal
function saudar(nome) {
  console.log(\`Ol√°, \${nome}\`);
}

// 'processarEntrada' √© uma fun√ß√£o que aceita um callback
function processarEntrada(callback) {
  const nome = "Ana";
  callback(nome); // Executamos o callback que nos foi passado
}

// Passamos a fun√ß√£o 'saudar' como um callback para 'processarEntrada'
processarEntrada(saudar); // Mostra "Ol√°, Ana"`}
			/>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				4. Arrow Functions e Callbacks: Uma Combina√ß√£o Poderosa
			</h3>
			<p className='mb-4'>
				A sintaxe concisa das fun√ß√µes de seta torna-as perfeitas para serem
				usadas como callbacks, especialmente com os m√©todos de array que veremos
				a seguir.
			</p>

			<h4 className='text-xl font-semibold mt-6 mb-2'>
				M√©todos de Array Comuns
			</h4>
			<p className='mb-4'>
				Muitos dos m√©todos mais √∫teis para trabalhar com arrays em JavaScript
				utilizam callbacks para definir a opera√ß√£o a realizar em cada elemento.
			</p>
			<ul className='list-disc list-inside space-y-4 pl-4 mb-4'>
				<li>
					<strong>`.forEach()`:</strong> Executa uma fun√ß√£o (callback) uma vez
					por cada elemento do array. √â um substituto moderno do la√ßo{" "}
					<code>for</code> para iterar sobre arrays.
					<CodeBlock
						language='javascript'
						codeString={`const nomes = ["Carlos", "Diana", "Eduardo"];

nomes.forEach(nome => {
  console.log(\`Bem-vindo, \${nome}\`);
});`}
					/>
				</li>
				<li>
					<strong>`.map()`:</strong> Cria um <strong>novo array</strong> com os
					resultados de chamar uma fun√ß√£o (callback) para cada elemento do array
					original. √â ideal para transformar dados.
					<CodeBlock
						language='javascript'
						codeString={`const numeros = [1, 2, 3, 4];
const dobros = numeros.map(numero => numero * 2);

console.log(dobros); // Mostra [2, 4, 6, 8]`}
					/>
				</li>
				<li>
					<strong>`.filter()`:</strong> Cria um <strong>novo array</strong> com
					todos os elementos que passam num teste (um callback que devolve{" "}
					<code>true</code> ou <code>false</code>).
					<CodeBlock
						language='javascript'
						codeString={`const idades = [15, 22, 18, 30, 12];
const maioresDeIdade = idades.filter(idade => idade >= 18);

console.log(maioresDeIdade); // Mostra [22, 18, 30]`}
					/>
				</li>
			</ul>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				üìù Tarefa: Processador de Dados de Alunos
			</h3>
			<p className='mb-4'>
				Vamos aplicar estes conceitos para manipular uma lista de alunos. Copie
				o seguinte array para o in√≠cio do seu ficheiro <code>main.js</code>:
			</p>
			<CodeBlock
				language='javascript'
				codeString={`const alunos = [
  { nome: "Ana", nota: 90, curso: "Matem√°tica" },
  { nome: "Lu√≠s", nota: 65, curso: "Hist√≥ria" },
  { nome: "Jo√£o", nota: 85, curso: "Matem√°tica" },
  { nome: "Elena", nota: 75, curso: "Ci√™ncias" },
  { nome: "Carlos", nota: 50, curso: "Matem√°tica" }
];`}
			/>
			<p className='mt-4'>Agora, realize as seguintes tarefas:</p>
			<ol className='list-decimal list-inside space-y-2 pl-4 mb-4'>
				<li>
					<strong>Filtrar Aprovados:</strong> Use o m√©todo `.filter()` com uma
					arrow function para criar um novo array chamado{" "}
					<code>alunosAprovados</code> que contenha apenas os alunos com uma{" "}
					<code>nota</code> de 70 ou mais. Imprima o resultado na consola.
				</li>
				<li>
					<strong>Mapear Nomes:</strong> Use o m√©todo `.map()` com uma arrow
					function para criar um novo array chamado <code>nomesAlunos</code> que
					contenha apenas os nomes de todos os alunos do array original. Imprima
					o resultado na consola.
				</li>
				<li>
					<strong>Mensagem aos Aprovados:</strong> Use o m√©todo `.forEach()`
					sobre o array <code>alunosAprovados</code> que criou no primeiro
					passo. Para cada aluno aprovado, imprima uma mensagem na consola que
					diga: "Parab√©ns, [nome]! Aprovado(a) a [curso]".
				</li>
				<li>
					<strong>Desafio (Opcional):</strong> Use uma combina√ß√£o de `.filter()`
					e `.map()` numa √∫nica linha (encadeamento de m√©todos) para criar um
					array com os nomes dos alunos de "Matem√°tica" que foram aprovados.
				</li>
			</ol>
		</section>
	</div>
);

export default Lecture24Pt;
