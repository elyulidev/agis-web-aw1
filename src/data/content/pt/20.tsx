import CodeBlock from "@/components/ui/code-block";

const Lecture20Pt = () => (
	<div className='space-y-8'>
		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				1. Armazenando Informa√ß√£o: O que s√£o Vari√°veis?
			</h3>
			<p className='mb-4'>
				Imagine que est√° a cozinhar. Precisa de recipientes para guardar os seus
				ingredientes: uma tigela para a farinha, uma ch√°vena para o a√ß√∫car, etc.
				Em programa√ß√£o, esses recipientes chamam-se <strong>vari√°veis</strong>.
				Uma vari√°vel √© um contentor com um nome onde podemos armazenar dados
				para os usar e manipular mais tarde no nosso programa.
			</p>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				2. Declarando Vari√°veis: `let`, `const` e o porqu√™ de n√£o usar `var`
			</h3>
			<p className='mb-4'>
				No JavaScript moderno, temos duas formas principais de declarar
				vari√°veis: <code>let</code> e <code>const</code>.
			</p>

			<h4 className='text-xl font-semibold mt-6 mb-2'>`let`</h4>
			<p className='mb-4'>
				√â usado para declarar vari√°veis cujo valor pode mudar (ser reatribu√≠do)
				ao longo do programa.
			</p>
			<CodeBlock
				language='javascript'
				codeString={`let pontuacao = 100;
console.log(pontuacao); // Mostra 100

pontuacao = 150; // O valor pode ser atualizado
console.log(pontuacao); // Mostra 150`}
			/>

			<h4 className='text-xl font-semibold mt-6 mb-2'>`const`</h4>
			<p className='mb-4'>
				√â usado para declarar "constantes", ou seja, vari√°veis cujo valor n√£o
				mudar√° uma vez atribu√≠do. Se tentar reatribuir uma `const`, o JavaScript
				ir√° dar um erro.
			</p>
			<div className='p-4 bg-blue-50 dark:bg-gray-800 border-l-4 border-blue-500 rounded-r-lg my-4'>
				<p className='font-semibold text-blue-800 dark:text-blue-300'>
					Pr√°tica recomendada:
				</p>
				<p className='text-blue-700 dark:text-gray-300'>
					Use <code>const</code> por defeito. S√≥ mude para <code>let</code> se
					souber que precisar√° de reatribuir a vari√°vel. Isto torna o seu c√≥digo
					mais seguro –∏ previs√≠vel.
				</p>
			</div>
			<CodeBlock
				language='javascript'
				codeString={`const nome = "Ana";
console.log(nome); // Mostra "Ana"

// Isto ir√° gerar um erro: TypeError: Assignment to constant variable.
// nome = "Carlos";`}
			/>

			<h4 className='text-xl font-semibold mt-6 mb-2'>E quanto ao `var`?</h4>
			<p className='mb-4'>
				<code>var</code> era a forma original de declarar vari√°veis em
				JavaScript. No entanto, tem um comportamento confuso com algo chamado
				"scope" (escopo), o que pode levar a erros dif√≠ceis de encontrar.{" "}
				<strong>
					No desenvolvimento moderno, √© considerada uma pr√°tica obsoleta e
					recomenda-se evitar completamente o seu uso em favor de `let` e
					`const`.
				</strong>
			</p>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				3. Tipos de Dados Primitivos
			</h3>
			<p className='mb-4'>
				O JavaScript tem v√°rios tipos de dados fundamentais que podemos
				armazenar nas nossas vari√°veis.
			</p>
			<ul className='list-disc list-inside space-y-4 pl-4 mb-4'>
				<li>
					<strong>String (Cadeia de caracteres):</strong> Para texto. Escreve-se
					entre aspas simples (<code>' '</code>), aspas duplas (<code>" "</code>
					) ou crases (<code>` `</code>). As crases permitem incorporar
					vari√°veis facilmente, o que √© conhecido como "template literals".
					<CodeBlock
						language='javascript'
						codeString={`const saudacao = "Ol√°";
const pessoa = 'Mundo';
const saudacaoCompleta = \`\${saudacao}, \${pessoa}!\`; // "Ol√°, Mundo!"`}
					/>
				</li>
				<li>
					<strong>Number (N√∫mero):</strong> Para qualquer tipo de n√∫mero, sejam
					inteiros ou com casas decimais.
					<CodeBlock
						language='javascript'
						codeString={`const idade = 30;
const preco = 19.99;`}
					/>
				</li>
				<li>
					<strong>Boolean (Booleano):</strong> S√≥ pode ter dois valores:{" "}
					<code>true</code> (verdadeiro) ou <code>false</code> (falso). √â a base
					da l√≥gica e da tomada de decis√µes.
					<CodeBlock
						language='javascript'
						codeString={`const eMaiorDeIdade = true;
const temDesconto = false;`}
					/>
				</li>
				<li>
					<strong>undefined:</strong> Uma vari√°vel que foi declarada mas √† qual
					ainda n√£o foi atribu√≠do um valor.
					<CodeBlock
						language='javascript'
						codeString={`let proximoPasso;
console.log(proximoPasso); // Mostra undefined`}
					/>
				</li>
				<li>
					<strong>null:</strong> Representa a aus√™ncia intencional de qualquer
					valor. √â um valor que n√≥s atribu√≠mos para indicar que "n√£o h√° nada".
					<CodeBlock
						language='javascript'
						codeString={`let vencedor = null; // Ainda n√£o h√° vencedor`}
					/>
				</li>
			</ul>
			<p className='mb-4'>
				Podemos verificar o tipo de uma vari√°vel usando o operador{" "}
				<code>typeof</code>.
			</p>
			<CodeBlock
				language='javascript'
				codeString={`const nome = "Jo√£o";
console.log(typeof nome); // Mostra "string"

const idade = 25;
console.log(typeof idade); // Mostra "number"`}
			/>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				4. Operadores: Realizando A√ß√µes
			</h3>
			<p className='mb-4'>
				Os operadores s√£o s√≠mbolos que realizam opera√ß√µes sobre as nossas
				vari√°veis e valores.
			</p>
			<h4 className='text-xl font-semibold mt-6 mb-2'>
				Operadores Aritm√©ticos
			</h4>
			<p>Para fazer matem√°tica.</p>
			<CodeBlock
				language='javascript'
				codeString={`const a = 10;
const b = 5;

console.log(a + b); // Soma: 15
console.log(a - b); // Subtra√ß√£o: 5
console.log(a * b); // Multiplica√ß√£o: 50
console.log(a / b); // Divis√£o: 2
console.log(a % b); // M√≥dulo (resto da divis√£o): 0
console.log(a ** b); // Exponencia√ß√£o: 100000`}
			/>

			<h4 className='text-xl font-semibold mt-6 mb-2'>
				Operadores de Atribui√ß√£o
			</h4>
			<p>Para atribuir valores √†s vari√°veis.</p>
			<CodeBlock
				language='javascript'
				codeString={`let x = 10;
x += 5; // Equivalente a x = x + 5. Agora x √© 15.
x -= 3; // Equivalente a x = x - 3. Agora x √© 12.
x *= 2; // Equivalente a x = x * 2. Agora x √© 24.`}
			/>

			<h4 className='text-xl font-semibold mt-6 mb-2'>
				Operadores de Compara√ß√£o
			</h4>
			<p>
				Para comparar valores. O resultado √© sempre um booleano (
				<code>true</code> ou <code>false</code>).
			</p>
			<div className='p-4 bg-yellow-50 dark:bg-gray-800 border-l-4 border-yellow-500 rounded-r-lg my-4'>
				<p className='font-semibold text-yellow-800 dark:text-yellow-300'>
					Importante!
				</p>
				<p className='text-yellow-700 dark:text-gray-300'>
					Use sempre <code>===</code> (igualdade estrita) em vez de{" "}
					<code>==</code> (igualdade flex√≠vel). <code>===</code> verifica tanto
					o valor como o tipo, o que evita erros inesperados. O mesmo se aplica
					a <code>!==</code> (desigualdade estrita).
				</p>
			</div>
			<CodeBlock
				language='javascript'
				codeString={`const num = 5;
const str = "5";

console.log(num == str);  // true (compara apenas o valor) -> Evitar!
console.log(num === str); // false (compara valor E tipo) -> Usar sempre!

console.log(num > 3);   // true
console.log(num <= 5);  // true
console.log(num !== 10); // true`}
			/>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				üìù Tarefa: Mini Perfil de Utilizador
			</h3>
			<p className='mb-4'>
				Vamos criar um pequeno script que define vari√°veis para um perfil de
				utilizador e as exibe na consola.
			</p>
			<ol className='list-decimal list-inside space-y-2 pl-4 mb-4'>
				<li>
					No seu ficheiro <code>main.js</code> (ou crie um novo, se preferir),
					apague o conte√∫do anterior.
				</li>
				<li>
					Declare as seguintes vari√°veis usando <code>const</code>:
					<ul className='list-disc list-inside space-y-1 pl-6 my-2'>
						<li>
							<code>nomeUtilizador</code> com o seu nome (string).
						</li>
						<li>
							<code>anoNascimento</code> com o seu ano de nascimento (number).
						</li>
						<li>
							<code>eEstudante</code> com um valor booleano que indique se √©
							estudante ou n√£o.
						</li>
					</ul>
				</li>
				<li>
					Declare uma vari√°vel com <code>let</code> chamada{" "}
					<code>idadeAtual</code>.
				</li>
				<li>
					Calcule a sua idade atual subtraindo <code>anoNascimento</code> do ano
					atual (pode usar 2024 como n√∫mero fixo) e atribua o resultado a{" "}
					<code>idadeAtual</code>.
				</li>
				<li>
					Use <code>console.log()</code> e "template literals" (crases ``) para
					imprimir uma mensagem de boas-vindas na consola que inclua todas as
					vari√°veis. Por exemplo: "Bem-vindo [nomeUtilizador], tem [idadeAtual]
					anos e o seu estado de estudante √© [eEstudante]".
				</li>
				<li>
					Use <code>console.log()</code> e o operador <code>typeof</code> para
					mostrar o tipo de dado de cada uma das vari√°veis que criou.
				</li>
			</ol>
		</section>
	</div>
);

export default Lecture20Pt;
