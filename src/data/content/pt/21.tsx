import CodeBlock from "@/components/ui/code-block";

const Lecture21Pt = () => (
	<div className='space-y-8'>
		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				1. Tomando Decis√µes no C√≥digo
			</h3>
			<p className='mb-4'>
				At√© agora, o nosso c√≥digo √© executado de forma linear, uma instru√ß√£o
				ap√≥s a outra. Mas os programas interessantes precisam de tomar decis√µes
				e seguir caminhos diferentes de acordo com certas condi√ß√µes. O
				utilizador est√° registado? A palavra-passe est√° correta? O produto tem
				stock? Para lidar com estas situa√ß√µes, usamos as estruturas de controlo
				condicionais.
			</p>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				2. A Declara√ß√£o `if...else`
			</h3>
			<p className='mb-4'>
				A estrutura condicional mais fundamental √© o <code>if</code> (se).
				Permite executar um bloco de c√≥digo apenas se uma condi√ß√£o espec√≠fica
				for verdadeira (<code>true</code>).
			</p>

			<h4 className='text-xl font-semibold mt-6 mb-2'>`if` b√°sico</h4>
			<CodeBlock
				language='javascript'
				codeString={`const idade = 20;

if (idade >= 18) {
  console.log("√â maior de idade. Pode entrar.");
}
// Se a idade fosse 15, este bloco de c√≥digo nunca seria executado.`}
			/>

			<h4 className='text-xl font-semibold mt-6 mb-2'>Adicionando o `else`</h4>
			<p className='mb-4'>
				Muitas vezes, queremos que algo diferente aconte√ßa se a condi√ß√£o for
				falsa (<code>false</code>). Para isso, adicionamos um bloco{" "}
				<code>else</code> (sen√£o).
			</p>
			<CodeBlock
				language='javascript'
				codeString={`const temperatura = 15;

if (temperatura > 25) {
  console.log("Est√° calor. Vista roupa leve!");
} else {
  console.log("N√£o est√° calor. √â melhor levar um casaco.");
}`}
			/>

			<h4 className='text-xl font-semibold mt-6 mb-2'>
				Encadeando com `else if`
			</h4>
			<p className='mb-4'>
				Para lidar com m√∫ltiplas condi√ß√µes, podemos encadear blocos com{" "}
				<code>else if</code>. O JavaScript avaliar√° cada condi√ß√£o por ordem e
				executar√° o primeiro bloco cujo resultado seja <code>true</code>. Se
				nenhum for verdadeiro, executar√° o bloco <code>else</code> final (se
				existir).
			</p>
			<CodeBlock
				language='javascript'
				codeString={`const nota = 75;

if (nota >= 90) {
  console.log("Excelente (A)");
} else if (nota >= 80) {
  console.log("Muito Bom (B)");
} else if (nota >= 70) {
  console.log("Bom (C)");
} else {
  console.log("Precisa de melhorar (F)");
}`}
			/>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				3. Operadores L√≥gicos: `&&`, `||`, `!`
			</h3>
			<p className='mb-4'>
				Para criar condi√ß√µes mais complexas, usamos os operadores l√≥gicos.
			</p>
			<ul className='list-disc list-inside space-y-4 pl-4 mb-4'>
				<li>
					<strong>`&&` (AND - E):</strong> Devolve <code>true</code> apenas se{" "}
					<strong>ambas</strong> as condi√ß√µes forem verdadeiras.
					<CodeBlock
						language='javascript'
						codeString={`const temCartaDeConducao = true;
const temCarro = false;

if (temCartaDeConducao && temCarro) {
  console.log("Pode conduzir."); // N√£o √© executado
}`}
					/>
				</li>
				<li>
					<strong>`||` (OR - OU):</strong> Devolve <code>true</code> se{" "}
					<strong>pelo menos uma</strong> das condi√ß√µes for verdadeira.
					<CodeBlock
						language='javascript'
						codeString={`const eMembroPremium = true;
const temCupao = false;

if (eMembroPremium || temCupao) {
  console.log("Tem acesso a desconto."); // √â executado
}`}
					/>
				</li>
				<li>
					<strong>`!` (NOT - N√ÉO):</strong> Inverte o valor booleano. Converte{" "}
					<code>true</code> em <code>false</code> e vice-versa.
					<CodeBlock
						language='javascript'
						codeString={`const estaChovendo = false;

if (!estaChovendo) {
  console.log("Est√° um bom dia para sair."); // √â executado
}`}
					/>
				</li>
			</ul>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				4. O Operador Tern√°rio: um atalho para `if...else`
			</h3>
			<p className='mb-4'>
				Para condicionais simples que atribuem um valor a uma vari√°vel, o
				operador tern√°rio √© uma alternativa mais curta e elegante.
			</p>
			<p className='mb-4'>
				A sua sintaxe √©:{" "}
				<code>condi√ß√£o ? valor_se_verdadeiro : valor_se_falso;</code>
			</p>
			<CodeBlock
				language='javascript'
				codeString={`const idade = 19;

// Usando if...else
let tipoEntrada;
if (idade >= 18) {
  tipoEntrada = "Adulto";
} else {
  tipoEntrada = "Menor";
}

// Usando o operador tern√°rio (mais conciso)
const tipoEntradaTernario = idade >= 18 ? "Adulto" : "Menor";

console.log(tipoEntradaTernario); // Mostra "Adulto"`}
			/>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>5. A Declara√ß√£o `switch`</h3>
			<p className='mb-4'>
				Quando precisa de comparar uma √∫nica vari√°vel com muitos valores
				poss√≠veis, uma longa cadeia de <code>if...else if</code> pode tornar-se
				dif√≠cil de ler. A declara√ß√£o <code>switch</code> √© uma alternativa mais
				limpa nestes casos.
			</p>
			<p className='mb-4'>
				Compara uma express√£o com diferentes <code>case</code> (casos). Quando
				encontra uma correspond√™ncia, executa o c√≥digo e a declara√ß√£o{" "}
				<code>break</code> p√°ra a execu√ß√£o. O bloco <code>default</code> √©
				opcional e √© executado se n√£o houver nenhuma correspond√™ncia.
			</p>
			<div className='p-4 bg-yellow-50 dark:bg-gray-800 border-l-4 border-yellow-500 rounded-r-lg my-4'>
				<p className='font-semibold text-yellow-800 dark:text-yellow-300'>
					N√£o se esque√ßa do `break`!
				</p>
				<p className='text-yellow-700 dark:text-gray-300'>
					Se omitir o <code>break</code>, o c√≥digo continuar√° a ser executado
					nos `case` seguintes at√© encontrar um <code>break</code> ou terminar o{" "}
					<code>switch</code>, o que geralmente √© um erro.
				</p>
			</div>
			<CodeBlock
				language='javascript'
				codeString={`const diaDaSemana = "ter√ßa";

switch (diaDaSemana) {
  case "segunda":
    console.log("Come√ßa a semana!");
    break;
  case "sexta":
    console.log("Quase fim de semana!");
    break;
  case "s√°bado":
  case "domingo":
    console.log("Aproveite o fim de semana!");
    break;
  default:
    console.log("√â um dia normal de trabalho.");
}`}
			/>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				üìù Tarefa: Classificador de Idades
			</h3>
			<p className='mb-4'>
				Vamos criar um script que pergunta ao utilizador a sua idade e lhe diz
				em que categoria de vida se encontra.
			</p>
			<ol className='list-decimal list-inside space-y-2 pl-4 mb-4'>
				<li>
					No seu ficheiro <code>main.js</code>, utilize a fun√ß√£o{" "}
					<code>prompt()</code> para perguntar ao utilizador a sua idade. Guarde
					o resultado numa vari√°vel. Por exemplo:{" "}
					<code>let idadeInput = prompt("Qual √© a sua idade?");</code>
				</li>
				<li>
					O valor que o <code>prompt()</code> devolve √© sempre uma string.
					Precisamos de o converter para n√∫mero. Use a fun√ß√£o{" "}
					<code>parseInt()</code>:{" "}
					<code>let idade = parseInt(idadeInput);</code>
				</li>
				<li>
					Agora, escreva uma estrutura <code>if...else if...else</code> que fa√ßa
					o seguinte:
					<ul className='list-disc list-inside space-y-1 pl-6 my-2'>
						<li>
							Se a idade for menor que 0, mostre um alerta (<code>alert()</code>
							) a dizer "Idade inv√°lida".
						</li>
						<li>Se a idade estiver entre 0 e 12, mostre "√â uma crian√ßa".</li>
						<li>
							Se a idade estiver entre 13 e 18, mostre "√â um adolescente".
						</li>
						<li>Se a idade estiver entre 19 e 64, mostre "√â um adulto/a".</li>
						<li>Se a idade for 65 ou maior, mostre "√â um idoso/a".</li>
					</ul>
				</li>
				<li>
					Adicione uma verifica√ß√£o no in√≠cio. Se o utilizador introduzir algo
					que n√£o seja um n√∫mero (<code>parseInt</code> devolver√°{" "}
					<code>NaN</code> - Not a Number), mostre um alerta a dizer "Por favor,
					introduza um n√∫mero v√°lido". Pode verificar se um valor √©{" "}
					<code>NaN</code> com a fun√ß√£o <code>isNaN(variavel)</code>.
				</li>
			</ol>
		</section>
	</div>
);

export default Lecture21Pt;
