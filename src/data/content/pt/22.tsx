import CodeBlock from "@/components/ui/code-block";

const Lecture22Pt = () => (
	<div className='space-y-8'>
		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				1. Repetindo Tarefas sem Repetir C√≥digo
			</h3>
			<p className='mb-4'>
				Imagine que precisa de mostrar uma lista de 100 produtos ou saudar 50
				utilizadores. Copiaria e colaria o mesmo c√≥digo 100 ou 50 vezes? Claro
				que n√£o! A programa√ß√£o baseia-se na efici√™ncia. Para realizar tarefas
				repetitivas, utilizamos <strong>la√ßos</strong> (ou "loops" em ingl√™s).
				Um la√ßo √© uma estrutura de controlo que repete um bloco de c√≥digo v√°rias
				vezes at√© que uma condi√ß√£o de sa√≠da seja cumprida.
			</p>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>2. O La√ßo `for`</h3>
			<p className='mb-4'>
				O la√ßo <code>for</code> √© o mais comum e estruturado. √â ideal quando
				sabe de antem√£o quantas vezes quer que o c√≥digo se repita. A sua sintaxe
				√© composta por tr√™s partes, separadas por ponto e v√≠rgula:
			</p>
			<ol className='list-decimal list-inside space-y-2 pl-4 mb-4'>
				<li>
					<strong>Inicializa√ß√£o:</strong> √â executada uma √∫nica vez, no in√≠cio.
					Geralmente, √© usada para declarar uma vari√°vel contadora
					(frequentemente chamada <code>i</code> de "√≠ndice").
				</li>
				<li>
					<strong>Condi√ß√£o:</strong> √â avaliada antes de cada repeti√ß√£o.
					Enquanto for <code>true</code>, o la√ßo continua. Quando for{" "}
					<code>false</code>, o la√ßo termina.
				</li>
				<li>
					<strong>Incremento/Decremento:</strong> √â executado no final de cada
					repeti√ß√£o. √â usado para atualizar a vari√°vel contadora.
				</li>
			</ol>
			<CodeBlock
				language='javascript'
				codeString={`// Sintaxe: for (inicializa√ß√£o; condi√ß√£o; incremento)

// Exemplo: Imprimir n√∫meros de 1 a 5
for (let i = 1; i <= 5; i++) {
  console.log("O n√∫mero √©: " + i);
}

// i++ √© um atalho para i = i + 1`}
			/>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>3. O La√ßo `while`</h3>
			<p className='mb-4'>
				O la√ßo <code>while</code> (enquanto) √© mais simples. Repete um bloco de
				c√≥digo enquanto uma condi√ß√£o for verdadeira. √â √∫til quando n√£o sabe
				exatamente quantas itera√ß√µes precisar√°, mas sabe quando o la√ßo deve
				parar.
			</p>
			<div className='p-4 bg-yellow-50 dark:bg-gray-800 border-l-4 border-yellow-500 rounded-r-lg my-4'>
				<p className='font-semibold text-yellow-800 dark:text-yellow-300'>
					Cuidado com os la√ßos infinitos!
				</p>
				<p className='text-yellow-700 dark:text-gray-300'>
					Com o <code>while</code>, √© da sua responsabilidade garantir que a
					condi√ß√£o eventualmente se torne <code>false</code>. Se se esquecer de
					atualizar a vari√°vel de controlo dentro do la√ßo, criar√° um la√ßo
					infinito que bloquear√° o seu navegador.
				</p>
			</div>
			<CodeBlock
				language='javascript'
				codeString={`let contador = 0; // 1. Inicializa√ß√£o fora do la√ßo

while (contador < 3) { // 2. Condi√ß√£o
  console.log("Ol√°!");
  contador++; // 3. Incremento DENTRO do la√ßo! (Muito importante)
}`}
			/>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>4. O La√ßo `do...while`</h3>
			<p className='mb-4'>
				Este la√ßo √© uma variante do <code>while</code>. A principal diferen√ßa √©
				que a condi√ß√£o √© avaliada <strong>depois</strong> de executar o bloco de
				c√≥digo. Isto garante que o c√≥digo dentro do la√ßo √© executado{" "}
				<strong>pelo menos uma vez</strong>, mesmo que a condi√ß√£o seja falsa
				desde o in√≠cio.
			</p>
			<CodeBlock
				language='javascript'
				codeString={`let i = 5;

do {
  console.log("Esta mensagem ser√° mostrada uma vez.");
  i++;
} while (i < 5); // A condi√ß√£o (5 < 5) √© falsa, mas o bloco j√° foi executado.`}
			/>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				5. Controlando o Fluxo: `break` e `continue`
			</h3>
			<p className='mb-4'>
				√Äs vezes, precisamos de mais controlo sobre o comportamento dos nossos
				la√ßos.
			</p>
			<h4 className='text-xl font-semibold mt-6 mb-2'>`break`</h4>
			<p className='mb-4'>
				A declara√ß√£o <code>break</code> (quebrar) sai do la√ßo imediatamente,
				independentemente de a condi√ß√£o do la√ßo continuar a ser verdadeira.
			</p>
			<CodeBlock
				language='javascript'
				codeString={`// Encontrar o primeiro n√∫mero divis√≠vel por 7 depois de 100
for (let i = 101; i < 200; i++) {
  if (i % 7 === 0) {
    console.log("O primeiro n√∫mero divis√≠vel por 7 √©: " + i);
    break; // Sa√≠mos do la√ßo assim que o encontramos
  }
}`}
			/>

			<h4 className='text-xl font-semibold mt-6 mb-2'>`continue`</h4>
			<p className='mb-4'>
				A declara√ß√£o <code>continue</code> (continuar) n√£o quebra o la√ßo, mas
				sim salta o resto do c√≥digo da itera√ß√£o atual e passa diretamente para a
				seguinte.
			</p>
			<CodeBlock
				language='javascript'
				codeString={`// Imprimir apenas os n√∫meros √≠mpares de 1 a 10
for (let i = 1; i <= 10; i++) {
  // Se o n√∫mero for par...
  if (i % 2 === 0) {
    continue; // ...salta esta itera√ß√£o e n√£o executes o console.log
  }
  console.log(i);
}`}
			/>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				üìù Tarefa: Tabuadas e Adivinhe o N√∫mero
			</h3>
			<p className='mb-4'>
				Vamos praticar os la√ßos com dois pequenos exerc√≠cios!
			</p>
			<ol className='list-decimal list-inside space-y-4 pl-4 mb-4'>
				<li>
					<strong>Exerc√≠cio 1: A Tabuada dos 7</strong>
					<ul className='list-disc list-inside space-y-1 pl-6 my-2'>
						<li>
							Use um la√ßo <code>for</code> para gerar a tabuada dos 7.
						</li>
						<li>O la√ßo deve ir de 1 a 10.</li>
						<li>
							Em cada itera√ß√£o, imprima na consola uma linha com o formato "7 x
							[n√∫mero] = [resultado]". Por exemplo, "7 x 1 = 7", "7 x 2 = 14",
							etc.
						</li>
					</ul>
				</li>
				<li>
					<strong>Exerc√≠cio 2: FizzBuzz Cl√°ssico</strong>
					<p className='my-2'>
						Este √© um problema de programa√ß√£o cl√°ssico. O objetivo √© escrever um
						script que imprima os n√∫meros de 1 a 100, mas com algumas exce√ß√µes:
					</p>
					<ul className='list-disc list-inside space-y-1 pl-6 my-2'>
						<li>Para os m√∫ltiplos de 3, imprima "Fizz" em vez do n√∫mero.</li>
						<li>Para os m√∫ltiplos de 5, imprima "Buzz" em vez do n√∫mero.</li>
						<li>
							Para os n√∫meros que s√£o m√∫ltiplos de 3 e 5, imprima "FizzBuzz".
						</li>
						<li>
							<strong>Dica:</strong> Precisar√° de um la√ßo <code>for</code> que
							v√° de 1 a 100. Dentro do la√ßo, usar√° uma estrutura{" "}
							<code>if...else if...else</code>. Lembre-se que o operador m√≥dulo
							(<code>%</code>) √© o seu melhor amigo aqui para verificar se um
							n√∫mero √© m√∫ltiplo de outro.
						</li>
					</ul>
				</li>
			</ol>
		</section>
	</div>
);

export default Lecture22Pt;
