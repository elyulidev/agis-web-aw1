import CodeBlock from "@/components/ui/code-block";

const Lecture48Es = () => (
	<div className='space-y-8'>
		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				1. Activando la Tienda: A침adir al Carrito
			</h3>
			<p className='mb-4'>
				Con nuestra tienda montada, es hora de implementar la funcionalidad
				principal: permitir que los usuarios a침adan productos al carrito.
				Usaremos delegaci칩n de eventos en el contenedor de productos para
				manejar los clics de manera eficiente.
			</p>
			<CodeBlock
				language='javascript'
				codeString={`// En script.js, despu칠s de seleccionar los elementos
const productosContainer = document.querySelector('#productos-container');

productosContainer.addEventListener('click', (event) => {
  if (event.target.tagName === 'BUTTON') {
    const idProducto = event.target.getAttribute('data-id');
    a침adirAlCarrito(idProducto);
  }
});`}
			/>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				2. L칩gica de `a침adirAlCarrito()`
			</h3>
			<p className='mb-4'>
				Esta funci칩n ser치 el cerebro de la operaci칩n. Recibir치 el ID de un
				producto y decidir치 si debe a침adir un nuevo 칤tem al carrito o
				simplemente incrementar la cantidad de uno existente.
			</p>
			<ol className='list-decimal list-inside space-y-2 pl-4 mb-4'>
				<li>
					Convertimos el ID (que viene como string del atributo `data-id`) a un
					n칰mero.
				</li>
				<li>
					Usamos el m칠todo de array `.find()` para buscar si ya existe un 칤tem
					con ese ID en nuestro array `carrito`.
				</li>
				<li>
					<strong>Si existe:</strong> Simplemente incrementamos su propiedad
					`cantidad`.
				</li>
				<li>
					<strong>Si no existe:</strong> Buscamos el producto completo en
					nuestro array `productos` y creamos un nuevo objeto para el carrito,
					combinando los datos del producto y a침adiendo `cantidad: 1`. Luego, lo
					a침adimos al array `carrito` con `.push()`.
				</li>
				<li>
					Finalmente, llamamos a una nueva funci칩n,{" "}
					<code>renderizarCarrito()</code>, para que la interfaz se actualice.
				</li>
			</ol>
			<CodeBlock
				language='javascript'
				codeString={`function a침adirAlCarrito(id) {
  const idNum = parseInt(id);

  // Comprobar si el producto ya est치 en el carrito
  const itemExistente = carrito.find(item => item.id === idNum);

  if (itemExistente) {
    // Si existe, incrementar la cantidad
    itemExistente.cantidad++;
  } else {
    // Si no existe, encontrar el producto y a침adirlo al carrito
    const productoA침adir = productos.find(producto => producto.id === idNum);
    if (productoA침adir) {
      carrito.push({
        id: productoA침adir.id,
        nombre: productoA침adir.nombre,
        precio: productoA침adir.precio,
        cantidad: 1
      });
    }
  }

  renderizarCarrito();
}`}
			/>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				3. Visualizando el Carrito: `renderizarCarrito()`
			</h3>
			<p className='mb-4'>
				Esta funci칩n es la contraparte de `renderizarProductos`. Su trabajo es
				tomar el estado actual del array `carrito` y dibujarlo en el DOM.
			</p>
			<ol className='list-decimal list-inside space-y-2 pl-4 mb-4'>
				<li>Limpiamos el contenido anterior del contenedor del carrito.</li>
				<li>
					Recorremos el array `carrito`. Por cada 칤tem, creamos el HTML
					correspondiente (nombre, cantidad, precio).
				</li>
				<li>
					Mientras recorremos, calculamos el precio total sumando el `precio *
					cantidad` de cada 칤tem.
				</li>
				<li>
					Finalmente, actualizamos el `textContent` del span del total con el
					valor calculado, formateado a dos decimales.
				</li>
			</ol>
			<CodeBlock
				language='javascript'
				codeString={`const carritoItemsContainer = document.querySelector('#carrito-items');
const carritoTotalSpan = document.querySelector('#carrito-total');

function renderizarCarrito() {
  carritoItemsContainer.innerHTML = '';
  let total = 0;

  carrito.forEach(item => {
    const itemDiv = document.createElement('div');
    itemDiv.classList.add('carrito-item');
    itemDiv.innerHTML = \`
      <span>\${item.nombre} (x\${item.cantidad})</span>
      <span>$\${(item.precio * item.cantidad).toFixed(2)}</span>
    \`;
    carritoItemsContainer.append(itemDiv);

    total += item.precio * item.cantidad;
  });

  carritoTotalSpan.textContent = total.toFixed(2);
}`}
			/>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				游닇 Tarea: Conectando los Puntos
			</h3>
			<p className='mb-4'>
				Tu objetivo es implementar la l칩gica para que el carrito de compras
				cobre vida.
			</p>
			<ol className='list-decimal list-inside space-y-2 pl-4 mb-4'>
				<li>
					A침ade el `addEventListener` al contenedor de productos para delegar
					los eventos de clic.
				</li>
				<li>
					Implementa la funci칩n `a침adirAlCarrito(id)` tal como se describi칩.
				</li>
				<li>
					Selecciona los elementos del DOM necesarios para el carrito (
					<code>#carrito-items</code> y <code>#carrito-total</code>).
				</li>
				<li>Implementa la funci칩n `renderizarCarrito()`.</li>
				<li>
					Prueba tu aplicaci칩n. Al hacer clic en los botones "A침adir al
					Carrito", deber칤as ver c칩mo los productos aparecen en la secci칩n del
					carrito y c칩mo el total se actualiza correctamente. Si a침ades el mismo
					producto varias veces, su cantidad deber칤a aumentar.
				</li>
			</ol>
			<p>
				En la pr칩xima lecci칩n, haremos que el carrito sea completamente
				interactivo, permitiendo actualizar cantidades y eliminar productos.
			</p>
		</section>
	</div>
);

export default Lecture48Es;
