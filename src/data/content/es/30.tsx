import CodeBlock from "@/components/ui/code-block";

const Lecture30Es = () => (
	<div className='space-y-8'>
		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				1. El DOM como un Jard√≠n Viviente
			</h3>
			<p className='mb-4'>
				Hemos aprendido a encontrar plantas (seleccionar elementos), leer sus
				etiquetas (obtener atributos) y cambiar el color de sus flores
				(modificar estilos y clases). Hoy, nos convertiremos en verdaderos
				jardineros del DOM: aprenderemos a plantar nuevas flores (crear
				elementos), moverlas de lugar y arrancarlas (eliminarlas).
			</p>
			<p>
				Dominar la creaci√≥n y eliminaci√≥n de nodos es la clave para construir
				aplicaciones web verdaderamente din√°micas, como listas de tareas, feeds
				de redes sociales o carritos de compra.
			</p>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				2. Creando Nuevos Elementos: `createElement`
			</h3>
			<p className='mb-4'>
				El primer paso es crear un nuevo elemento desde cero. Esto se hace con
				el m√©todo <code>document.createElement('nombreDeEtiqueta')</code>.
			</p>
			<p className='mb-4'>
				Este m√©todo crea un elemento HTML en la memoria de JavaScript, pero{" "}
				<strong>a√∫n no es visible en la p√°gina</strong>. Es como construir un
				mueble en tu taller; existe, pero todav√≠a no lo has puesto en ninguna
				habitaci√≥n de la casa.
			</p>
			<CodeBlock
				language='javascript'
				codeString={`// Creamos un nuevo elemento <li>
const nuevoItemLista = document.createElement('li');

// Ahora podemos manipularlo como cualquier otro elemento
nuevoItemLista.textContent = "Nuevo √≠tem desde JS";
nuevoItemLista.classList.add('item-especial');

console.log(nuevoItemLista); // Muestra el elemento <li> en la consola
// Pero a√∫n no se ve en la p√°gina.`}
			/>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				3. A√±adiendo Elementos al DOM
			</h3>
			<p className='mb-4'>
				Una vez que nuestro elemento est√° creado y configurado, necesitamos
				insertarlo en el DOM para que sea visible. Para ello, primero
				seleccionamos un elemento "padre" que ya exista en la p√°gina.
			</p>

			<h4 className='text-xl font-semibold mt-6 mb-2'>
				M√©todos Modernos (Recomendados)
			</h4>
			<p className='mb-4'>Estos m√©todos son m√°s intuitivos y flexibles.</p>
			<ul className='list-disc list-inside space-y-2 pl-4 mb-4'>
				<li>
					<strong>`padre.append(hijo)`</strong>: A√±ade el nuevo elemento al{" "}
					<strong>final</strong> de la lista de hijos del elemento padre.
				</li>
				<li>
					<strong>`padre.prepend(hijo)`</strong>: A√±ade el nuevo elemento al{" "}
					<strong>principio</strong> de la lista de hijos del elemento padre.
				</li>
			</ul>
			<CodeBlock
				language='html'
				codeString={`<!-- HTML -->
<ul id="mi-lista">
  <li>Primer √≠tem</li>
</ul>`}
			/>
			<CodeBlock
				language='javascript'
				codeString={`const lista = document.querySelector('#mi-lista');

// Creamos un nuevo <li>
const itemFinal = document.createElement('li');
itemFinal.textContent = "√öltimo √≠tem (a√±adido con append)";
lista.append(itemFinal);

// Creamos otro <li>
const itemPrincipio = document.createElement('li');
itemPrincipio.textContent = "Primer √≠tem (a√±adido con prepend)";
lista.prepend(itemPrincipio);`}
			/>

			<h4 className='text-xl font-semibold mt-6 mb-2'>
				M√©todo Cl√°sico: `appendChild`
			</h4>
			<p className='mb-4'>
				Antes de <code>append</code> y <code>prepend</code>, la forma est√°ndar
				era <code>padre.appendChild(hijo)</code>. Funciona de manera similar a{" "}
				<code>append</code>, a√±adiendo el elemento al final. Todav√≠a lo ver√°s en
				mucho c√≥digo antiguo.
			</p>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				4. Eliminando Elementos del DOM
			</h3>
			<p className='mb-4'>Quitar elementos es igual de importante.</p>
			<h4 className='text-xl font-semibold mt-6 mb-2'>
				M√©todo Moderno (Recomendado): `remove`
			</h4>
			<p className='mb-4'>
				La forma m√°s f√°cil y directa. Simplemente llamas al m√©todo{" "}
				<code>.remove()</code> en el elemento que quieres eliminar.
			</p>
			<CodeBlock
				language='javascript'
				codeString={`// Suponiendo que queremos eliminar el elemento con id="item-a-borrar"
const itemParaBorrar = document.querySelector('#item-a-borrar');

// Si el elemento existe, lo eliminamos
if (itemParaBorrar) {
  itemParaBorrar.remove();
}`}
			/>

			<h4 className='text-xl font-semibold mt-6 mb-2'>
				M√©todo Cl√°sico: `removeChild`
			</h4>
			<p className='mb-4'>
				El m√©todo m√°s antiguo requer√≠a obtener el padre del elemento para poder
				eliminar al hijo: <code>padre.removeChild(hijo)</code>. Es m√°s verboso,
				pero funcional.
			</p>
			<CodeBlock
				language='javascript'
				codeString={`// Forma antigua
const itemParaBorrar = document.querySelector('#item-a-borrar');
if (itemParaBorrar) {
  const padre = itemParaBorrar.parentElement;
  padre.removeChild(itemParaBorrar);
}`}
			/>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				üìù Tarea: Lista de Tareas Interactiva
			</h3>
			<p className='mb-4'>
				Este es el proyecto que une todo lo que hemos aprendido en el M√≥dulo 7.
				Crearemos una aplicaci√≥n simple de lista de tareas que nos permitir√°
				a√±adir nuevos √≠tems a una lista.
			</p>
			<p>1. Crea un archivo HTML con la siguiente estructura:</p>
			<CodeBlock
				language='html'
				codeString={`<!DOCTYPE html>
<html lang="es">
<head>
  <title>Lista de Tareas</title>
</head>
<body>
  <h1>Mi Lista de Tareas</h1>

  <div>
    <input type="text" id="nueva-tarea-input" placeholder="A√±adir una nueva tarea">
    <button id="agregar-btn">Agregar</button>
  </div>

  <ul id="lista-tareas">
    <!-- Las tareas se a√±adir√°n aqu√≠ -->
  </ul>

  <script src="main.js"></script>
</body>
</html>`}
			/>
			<p className='mt-4'>
				2. En tu archivo <code>main.js</code>, sigue estos pasos:
			</p>
			<ol className='list-decimal list-inside space-y-2 pl-4 mb-4'>
				<li>
					<strong>Seleccionar Elementos:</strong> Selecciona el input (
					<code>#nueva-tarea-input</code>), el bot√≥n (<code>#agregar-btn</code>)
					y la lista (<code>#lista-tareas</code>). Gu√°rdalos en variables.
				</li>
				<li>
					<strong>Escuchar el Clic:</strong> A√±ade un escuchador de eventos de
					clic al bot√≥n. La l√≥gica para a√±adir la tarea ir√° dentro de esta
					funci√≥n.
				</li>
				<li>
					<strong>Dentro de la funci√≥n del clic:</strong>
					<ul className='list-disc list-inside space-y-1 pl-6 my-2'>
						<li>
							Obt√©n el valor actual del input y gu√°rdalo en una variable. Por
							ejemplo: <code>const textoTarea = input.value;</code>
						</li>
						<li>
							<strong>Validaci√≥n:</strong> Comprueba si el{" "}
							<code>textoTarea</code> no est√° vac√≠o. Si lo est√°, no hagas nada
							(puedes usar <code>return;</code> para salir de la funci√≥n).
						</li>
						<li>
							<strong>Crear el `li`:</strong> Usa{" "}
							<code>document.createElement('li')</code> para crear un nuevo
							elemento de lista.
						</li>
						<li>
							<strong>A√±adir Contenido:</strong> Establece el{" "}
							<code>textContent</code> del nuevo `li` con el{" "}
							<code>textoTarea</code>.
						</li>
						<li>
							<strong>A√±adir a la Lista:</strong> Usa <code>.append()</code> en
							tu variable de la lista para a√±adir el nuevo `li` al DOM.
						</li>
						<li>
							<strong>Limpiar el Input:</strong> Despu√©s de a√±adir la tarea,
							limpia el campo de texto estableciendo su valor a una cadena
							vac√≠a: <code>input.value = '';</code>
						</li>
					</ul>
				</li>
				<li>
					<strong>Reto (Opcional):</strong> Dentro de la funci√≥n del clic,
					despu√©s de crear el <code>li</code>, crea tambi√©n un bot√≥n de
					"Eliminar" (<code>createElement('button')</code>). A√±ade este bot√≥n
					dentro del <code>li</code>. Luego, a√±ade un evento de clic a este
					nuevo bot√≥n que, cuando se active, elimine el <code>li</code> completo
					(<code>nuevoLi.remove()</code>).
				</li>
			</ol>
			<p>
				¬°Felicidades! Al completar esta tarea, habr√°s construido tu primera mini
				aplicaci√≥n web interactiva usando manipulaci√≥n del DOM.
			</p>
		</section>
	</div>
);

export default Lecture30Es;
