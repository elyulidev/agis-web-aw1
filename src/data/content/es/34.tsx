import CodeBlock from "@/components/ui/code-block";

const Lecture34Es = () => (
	<div className='space-y-8'>
		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				1. El Problema de los M√∫ltiples Listeners
			</h3>
			<p className='mb-4'>
				Imagina una lista con 100 √≠tems. Si queremos que cada √≠tem reaccione a
				un clic, el enfoque ingenuo ser√≠a a√±adir un{" "}
				<code>addEventListener</code> a cada uno de los 100{" "}
				<code>&lt;li&gt;</code>.
			</p>
			<p className='mb-4'>Esto presenta dos grandes problemas:</p>
			<ul className='list-disc list-inside space-y-2 pl-4 mb-4'>
				<li>
					<strong>Rendimiento:</strong> A√±adir cientos o miles de escuchadores
					de eventos puede consumir memoria y hacer que la p√°gina se sienta m√°s
					lenta.
				</li>
				<li>
					<strong>Elementos Din√°micos:</strong> Si a√±adimos un nuevo √≠tem a la
					lista con JavaScript, ¬°ese nuevo √≠tem no tendr√° el escuchador de
					eventos! Tendr√≠amos que acordarnos de a√±adirlo manualmente cada vez.
				</li>
			</ul>
			<p>
				Afortunadamente, existe un patr√≥n de dise√±o mucho m√°s elegante y
				eficiente para resolver esto: la <strong>delegaci√≥n de eventos</strong>.
			</p>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				2. El Mecanismo: Burbujeo de Eventos (Event Bubbling)
			</h3>
			<p className='mb-4'>
				Para entender la delegaci√≥n, primero debemos entender c√≥mo viajan los
				eventos por el DOM. Cuando un evento ocurre en un elemento (por ejemplo,
				un clic en un <code>&lt;button&gt;</code>), el evento no se detiene ah√≠.
				Despu√©s de ejecutarse en el bot√≥n, "burbujea" hacia arriba: se dispara
				en el padre del bot√≥n, luego en el abuelo, y as√≠ sucesivamente, hasta
				llegar al <code>&lt;html&gt;</code> y finalmente al objeto{" "}
				<code>document</code>.
			</p>
			<div className='my-6 p-4 border rounded-lg bg-gray-50 dark:bg-gray-800/50 text-center'>
				<h4 className='font-semibold mb-2'>Flujo del Burbujeo</h4>
				<pre className='font-mono text-sm leading-relaxed text-left p-4 bg-white dark:bg-gray-900 rounded-md'>
					{`
   document
      ‚Üë
     html
      ‚Üë
     body
      ‚Üë
      ul  <-- El evento llega aqu√≠
      ‚Üë
     li   <-- El evento llega aqu√≠
      ‚Üë
   button <-- Clic aqu√≠ (event.target)
`}
				</pre>
			</div>
			<p>
				Podemos aprovechar este comportamiento. En lugar de escuchar en el
				objetivo original, podemos escuchar en un ancestro com√∫n.
			</p>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				3. La Soluci√≥n: Delegaci√≥n de Eventos
			</h3>
			<p className='mb-4'>
				El patr√≥n de delegaci√≥n de eventos consiste en lo siguiente:
			</p>
			<ol className='list-decimal list-inside space-y-2 pl-4 mb-4'>
				<li>
					En lugar de a√±adir un escuchador a cada elemento hijo, a√±adimos{" "}
					<strong>un solo escuchador</strong> a su contenedor padre (por
					ejemplo, al <code>&lt;ul&gt;</code> en lugar de a cada{" "}
					<code>&lt;li&gt;</code>).
				</li>
				<li>
					Dentro de la funci√≥n callback, usamos la propiedad{" "}
					<strong>`event.target`</strong> para identificar exactamente qu√©
					elemento hijo fue el que origin√≥ el evento.
				</li>
				<li>
					Comprobamos si <code>event.target</code> es el tipo de elemento que
					nos interesa.
				</li>
			</ol>
			<p className='mb-4'>Veamos c√≥mo se aplica a nuestra lista de √≠tems.</p>
			<CodeBlock
				language='html'
				codeString={`<!-- HTML -->
<ul id="lista-padre">
  <li class="item">√çtem 1</li>
  <li class="item">√çtem 2</li>
  <li class="item">√çtem 3</li>
</ul>`}
			/>
			<CodeBlock
				language='javascript'
				codeString={`const listaPadre = document.querySelector('#lista-padre');

listaPadre.addEventListener('click', function(event) {
  // 'this' y 'event.currentTarget' se refieren a #lista-padre
  // 'event.target' se refiere al <li> espec√≠fico donde se hizo clic

  // Comprobamos si el elemento clickeado tiene la clase 'item'
  if (event.target && event.target.matches('.item')) {
    console.log("Se hizo clic en el √≠tem:", event.target.textContent);
  }
});`}
			/>
			<p className='mt-4'>
				El m√©todo <code>.matches('selectorCSS')</code> es perfecto para esto.
				Devuelve <code>true</code> si el elemento coincide con el selector, y{" "}
				<code>false</code> si no.
			</p>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				4. Beneficios de la Delegaci√≥n de Eventos
			</h3>
			<ul className='list-disc list-inside space-y-2 pl-4 mb-4'>
				<li>
					<strong>Eficiencia:</strong> Usamos un solo escuchador de eventos en
					lugar de potencialmente cientos. Esto ahorra memoria y mejora el
					rendimiento.
				</li>
				<li>
					<strong>Manejo de Elementos Din√°micos:</strong> Si m√°s tarde a√±adimos
					un nuevo <code>&lt;li&gt;</code> a la lista, el c√≥digo seguir√°
					funcionando para √©l sin necesidad de hacer nada m√°s, porque el
					listener est√° en el padre, que siempre ha estado ah√≠.
				</li>
				<li>
					<strong>Simplicidad:</strong> El c√≥digo a menudo es m√°s limpio y f√°cil
					de mantener, ya que no tenemos que preocuparnos por a√±adir y quitar
					listeners a medida que los elementos cambian.
				</li>
			</ul>
		</section>

		<section>
			<h3 className='text-2xl font-semibold mb-3'>
				üìù Tarea: Lista de Tareas con Eliminaci√≥n Delegada
			</h3>
			<p className='mb-4'>
				Vamos a mejorar la lista de tareas que hicimos en la lecci√≥n 30. La
				funcionalidad de a√±adir tareas sigue igual, pero ahora implementaremos
				la eliminaci√≥n de √≠tems usando el patr√≥n de delegaci√≥n de eventos.
			</p>
			<p>1. Empieza con el HTML de la lecci√≥n 30.</p>
			<p>
				2. Modifica el JavaScript que a√±ade tareas. Cuando crees un nuevo{" "}
				<code>&lt;li&gt;</code>, tambi√©n crea un bot√≥n de "Eliminar" y a√±√°delo
				dentro del <code>&lt;li&gt;</code>.
			</p>
			<CodeBlock
				language='javascript'
				codeString={`// Dentro de la funci√≥n para agregar tarea...
const nuevoLi = document.createElement('li');
nuevoLi.textContent = textoTarea + ' '; // A√±adimos un espacio

const botonEliminar = document.createElement('button');
botonEliminar.textContent = 'Eliminar';
botonEliminar.classList.add('btn-eliminar'); // Muy importante para la delegaci√≥n

nuevoLi.append(botonEliminar);
lista.append(nuevoLi);`}
			/>
			<p className='mt-4'>
				3. Ahora, la parte clave. A√±ade <strong>un solo</strong> escuchador de
				eventos de clic a la lista <code>&lt;ul&gt;</code> (
				<code>#lista-tareas</code>).
			</p>
			<ol className='list-decimal list-inside space-y-2 pl-4 mb-4'>
				<li>
					Dentro de la funci√≥n callback, comprueba si el elemento clickeado (
					<code>event.target</code>) tiene la clase <code>.btn-eliminar</code>.
				</li>
				<li>
					Si la tiene, significa que se ha hecho clic en un bot√≥n de eliminar.
				</li>
				<li>
					El objetivo es eliminar el <code>&lt;li&gt;</code> padre de ese bot√≥n.
					Usa <code>event.target.parentElement</code> para obtener el{" "}
					<code>&lt;li&gt;</code> y luego llama al m√©todo <code>.remove()</code>{" "}
					en √©l.
				</li>
			</ol>
			<p>
				Prueba tu aplicaci√≥n: a√±ade varias tareas y luego elim√≠nalas haciendo
				clic en sus respectivos botones. Ver√°s que funciona perfectamente,
				incluso para las tareas nuevas, gracias a tener un solo listener
				inteligente en el contenedor padre.
			</p>
		</section>
	</div>
);

export default Lecture34Es;
